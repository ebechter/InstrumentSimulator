% simulation Main Script
% clear up the workspace
clear; clc
addpath(genpath(pwd))
parflag = false;
scale = 1;
load polycoeffs2
load chebycoeffs2
nOrders = 10;
cheby=0;
aoType = 'SOUL'; % 'FLAO' or 'SOUL'
entWindow = 'ilocater'; %'ilocater' (ECI) or  empty for default lbti []
zenith = 10*(pi/180); %rad
seeing = 1.1; %arcsec

SpecOrImager = 'Imager' ;

%========== Instanciate objects ===========%

if strcmp(SpecOrImager,'Spectrograph') ==1
    curve{1}.source = 'spectrograph';
    curve{1}.atmosphere = 1;
    curve{1}.throughput = {'lbt','lbti','fiberCh','fiberLink','spectrograph'};
    curve{1}.AO = 1;
    
    curve{2}.source = 'etalon';
    curve{2}.atmosphere = 0;
    curve{2}.throughput = {'calibration','spectrograph'};
    curve{2}.AO = 0;
    
    curve{3} = curve{1};
    
    tracenum = [1,2,3];

elseif strcmp(SpecOrImager,'Imager') == 1
    
    % curve{1}.throughput = {'lbt','lbti','fiberCh'};
    curve{1}.source = 'cal';
    curve{1}.atmosphere = 0;
    curve{1}.throughput = {'filter'};
    curve{1}.AO = 0;
    tracenum = 1;
end

for ii = tracenum
    
    %========== Source Options ===========%
    
    if strcmp('etalon', curve{ii}.source) == 1 && exist('etalon','var') == 0
        % make an etalon
        etalon = Etalon();
        
    elseif strcmp('star', curve{ii}.source) == 1 && exist('star','var') == 0
        % make a star
        star = Star('M0V',13.8,1,2,0,'counts');
        
    elseif strcmp('flat', curve{ii}.source) == 1 && exist('flat','var') == 0
        % make a flat spectrum
        flat = Flat();
    
    elseif strcmp('cal', curve{ii}.source) == 1 && exist('SuperK','var') == 0
        WLS = SuperK();
    end
    
    %========== Atmosphere Options ===========%
    
    if curve{ii}.atmosphere == 1 && exist('atmosphere','var') == 0
        atmosphere = Atmosphere();
    end
    
    %========== Throughput Options ===========%
    if exist('star_components','var')==0
        star_components =[];
    end
    if exist('AO_list','var') ==0
        AO_list = [];
    end
    if any(strcmp('spectrograph', curve{ii}.throughput)) == 1 && exist('spectrograph','var') == 0
        % make the spectrograph throughput
        spectrograph = Spectrograph();
        
    end
    
    if any(strcmp('lbt', curve{ii}.throughput)) == 1 && exist('lbt','var') == 0
        % make the lbt throughput
        lbt = Imager('LBT');
        star_components = [star_components, lbt];
        
    end
    
    if any(strcmp('lbti', curve{ii}.throughput)) == 1 && exist('lbti','var') == 0
        % make the l throughput
        lbti = Imager('LBTI');
        star_components = [star_components, lbti];
    end
    
    if any(strcmp('fiberCh', curve{ii}.throughput)) == 1 && exist('fiberCh','var') == 0
        % make the l throughput
        fiber = Imager('FIBER');
        star_components = [star_components, fiber];
    end
    
    if curve{ii}.AO == 1 && exist('lbti_ao','var') == 0
        % make the l throughput
        lbti_ao = AO([aoType entWindow]);
        AO_list = [AO_list, lbti_ao];
        
    end
    
    if any(strcmp('filter', curve{ii}.throughput)) == 1 && exist('filter','var') == 0
        % make the lbt throughput
        filter = Imager('Filter');
        star_components = [star_components, filter];
        
    end
    
end

simulation = Simulation(scale);
spectral_cell = cell(3,1);


% this decides how to combine throughput terms with sources and atmospheres for each of the traces.

runDecisionTree()

if strcmp(SpecOrImager,'Imager') == 1
    % doImagerThings
    Bandpass = [0.800,1.800]; % hard cutoff for bandpass
    [trimWave,trimCounts] = Simulation.trimToBand(spectral_cell{1}(:,1),spectral_cell{1}(:,2),Bandpass);
%     simulation.totalCounts = sum(trimCounts);
%     simulation.totalEnergy = Spectra.counts2Energy(trimWave,trimCounts);
%     simulation.totalEnergy = sum(simulation.totalEnergy);   
%     total = (max(Bandpass(1,:)*1000)-min(Bandpass(1,:))*1000);
%     IntTrans = trapz(tputProg{1,3}(:,1),tputProg{1,3}(:,2))/total;


    
    clear nOrders ii order_coeff ret scale cheby chebs tracenum wave_coeff p1 parflag SpecOrImager total spectral_cell
    
   return
end

% At this point you have a spectral_cell of {trace}{order}(wavelength,counts)

% Now convolve each spectral order and clip on detector in parallel or serial.
for jj = tracenum
    
    fprintf('\nStarting trace %i \n',jj)
    if parflag == true
        parallel_scale = simulation.scale;
        parallel_cell = spectral_cell{jj};
        
        parfor ii = 1:nOrders
            
            fprintf('Computing order %i... ',ii)
            
            [OrderFlux{ii}, OrderWave{ii}] = Simulation.ConvolveOrder(parallel_cell{1}(:,ii),parallel_cell{2}(:,ii),wave_coeff(ii,:,jj),parallel_scale);
            Detector(:,:,ii,jj) = Simulation.CliptoDetector(OrderFlux{ii}, OrderWave{ii},order_coeff(ii,:,jj),wave_coeff(ii,:,jj),cheby,p1{jj},ii);
            fprintf('%s \n',char(hex2dec('2713')))
            
        end
        
        clear temp_cell
    else
        for ii = 1:nOrders
            
            fprintf('Computing order %i... ',ii)
            
            [OrderFlux{ii}, OrderWave{ii}] = Simulation.ConvolveOrder(spectral_cell{jj}{1}(:,ii),spectral_cell{jj}{2}(:,ii),wave_coeff(ii,:,jj),simulation.scale);
            Detector(:,:,ii,jj) = Simulation.CliptoDetector(OrderFlux{ii}, OrderWave{ii},order_coeff(ii,:,jj),wave_coeff(ii,:,jj),cheby,p1{jj},ii);
            fprintf('%s \n',char(hex2dec('2713')))
            
        end
    end
    
    
end















% Fiber throughput and AO correction go into combine Imager curves.

% Then include the spectrograph orders and throughput.

% Derive wavelength solution map or load saved map.

% Convolve and Clip loop.











